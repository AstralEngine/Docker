notifications:
  email:
    false
language: shell

stages:
  - test
  - trigger

env:
  - TARGET: x86_64-unknown-linux-gnu
  - TARGET: i686-unknown-linux-gnu
  - TARGET: aarch64-linux-android
  - TARGET: arm-linux-androideabi
  - TARGET: x86_64-linux-android
  # - TARGET: i686-linux-android

install: |
  git clone https://github.com/docker-library/official-images.git ~/official-images
  TOOLCHAINS=( "stable" "beta" "nightly" )

before_script: |
  RUSTC_STABLE=$(docker run astralengine/$TARGET:stable rustc --version || true)
  RUSTC_BETA=$(docker run astralengine/$TARGET:beta rustc --version || true)
  RUSTC_NIGHTLY=$(docker run astralengine/$TARGET:nightly rustc --version || true)
  echo $RUSTC_STABLE
  echo $RUSTC_BETA
  echo $RUSTC_NIGHTLY

script: |
  for TOOLCHAIN in "${TOOLCHAINS[@]}"; do
    travis_fold start "$TOOLCHAIN"
    travis_time_start
    travis_retry docker build \
      --rm \
      --pull \
      --cache-from astralengine/$TARGET:$TOOLCHAIN \
      --file $TARGET/Dockerfile \
      --tag astralengine/$TARGET:$TOOLCHAIN \
      --build-arg TOOLCHAIN=$TOOLCHAIN \
      --build-arg DATE="`date`" \
      . || exit
    ~/official-images/test/run.sh astralengine/$TARGET:$TOOLCHAIN
    travis_time_finish
    travis_fold end "$TOOLCHAIN"
  done

after_success: |
  RUSTC_STABLE_NEW=$(docker run astralengine/$TARGET:stable rustc --version || true)
  RUSTC_BETA_NEW=$(docker run astralengine/$TARGET:beta rustc --version || true)
  RUSTC_NIGHTLY_NEW=$(docker run astralengine/$TARGET:nightly rustc --version || true)
  echo $RUSTC_STABLE_NEW
  echo $RUSTC_BETA_NEW
  echo $RUSTC_NIGHTLY_NEW

before_deploy: |
  VERSION=$(echo $RUSTC_STABLE_NEW | awk '{ print $2 }')
  if [[ $RUSTC_STABLE_NEW == $RUSTC_STABLE && $TRAVIS_EVENT_TYPE == cron ]]; then
    docker rmi -f astralengine/$TARGET:stable
  else
    docker tag astralengine/$TARGET:stable astralengine/$TARGET:$VERSION
    docker tag astralengine/$TARGET:stable astralengine/$TARGET:latest
  fi
  if [[ $RUSTC_BETA_NEW == $RUSTC_BETA && $TRAVIS_EVENT_TYPE == cron ]]; then
    docker rmi -f astralengine/$TARGET:beta
  fi
  if [[ $RUSTC_NIGHTLY_NEW == $RUSTC_NIGHTLY && $TRAVIS_EVENT_TYPE == cron ]]; then
    docker rmi -f astralengine/$TARGET:nightly
  fi
  echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin
deploy:
  provider: script
  script: docker push astralengine/$TARGET || true
  on:
    branch: master

after_script: docker images

jobs:
  include:
    - stage: versions
      env:
        - TARGET: x86_64-unknown-linux-gnu
      script: |

    - stage: trigger
      name: Astral Engine
      script : |
        RUSTC_STABLE=$(docker run astralengine/$TARGET:stable rustc --version)
        RUSTC_BETA=$(docker run astralengine/$TARGET:beta rustc --version)
        RUSTC_NIGHTLY=$(docker run astralengine/$TARGET:nightly rustc --version)

        curl -s -X GET \
          -H "Content-Type:application/json" \
          -H "Accept:application/json" \
          -H "Authorization:token ${GH_TOKEN}" \
          https://api.github.com/gists/$GIST_ID > latest.json

        LATEST_STABLE=$(cat latest.json | jq -r '.["files"]["stable.txt"]["content"]')
        LATEST_BETA=$(cat latest.json | jq -r '.["files"]["beta.txt"]["content"]')
        LATEST_NIGHTLY=$(cat latest.json | jq -r '.["files"]["nightly.txt"]["content"]')

        if [ "${RUSTC_STABLE}" != "${LATEST_STABLE}" ] || [ "${RUSTC_BETA}" != "${LATEST_BETA}" ] || [ "${RUSTC_NIGHTLY}" != "${LATEST_NIGHTLY}" ]; then
          curl -s -X PATCH \
            -H "Content-Type:application/json" \
            -H "Accept:application/json" \
            -H "Authorization:token ${GH_TOKEN}" \
            -d "{\"description\":\"Update versions\",\"files\":{\"stable.txt\":{\"content\":\"$RUSTC_STABLE\"},\"beta.txt\":{\"content\":\"$RUSTC_BETA\"},\"nightly.txt\":{\"content\":\"$RUSTC_NIGHTLY\"}}}" \
            https://api.github.com/gists/$GIST_ID

          body="{\"request\":{\"branch\":\"master\",\"message\":\"Test latest rust version\"}}"
          curl -s -X POST \
            -H "Content-Type:application/json" \
            -H "Accept:application/json" \
            -H "Travis-API-Version:3" \
            -H "Authorization:token ${TRAVIS_TOKEN}" \
            -d "$body" \
            https://api.travis-ci.org/repo/astral-engine%2Fastral/requests
        fi
