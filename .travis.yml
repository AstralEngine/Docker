notifications:
  email:
    false

env:
  - TARGET: x86_64-unknown-linux-gnu
  - TARGET: i686-unknown-linux-gnu

install: |
  git clone https://github.com/docker-library/official-images.git ~/official-images
  TOOLCHAINS=( "stable" "beta" "nightly" )

before_script: |
  RUSTC_STABLE=$(docker run $REPOSITORY/$TARGET:stable rustc --version || true)
  RUSTC_BETA=$(docker run $REPOSITORY/$TARGET:beta rustc --version || true)
  RUSTC_NIGHTLY=$(docker run $REPOSITORY/$TARGET:nightly rustc --version || true)
  for TOOLCHAIN in "${TOOLCHAINS[@]}"; do
    docker rmi -f $REPOSITORY/$TARGET:$TOOLCHAIN || true
  done
  echo $RUSTC_STABLE
  echo $RUSTC_BETA
  echo $RUSTC_NIGHTLY

script: |
  for NAME in `find $TARGET -name Dockerfile -exec dirname {} \; | sort -u`; do
    docker build \
      --rm \
      --file $NAME/Dockerfile \
      --tag ${NAME////-} \
      .
  done
  for TOOLCHAIN in "${TOOLCHAINS[@]}"; do
    docker build \
      --rm \
      --tag $REPOSITORY/$TARGET:$TOOLCHAIN \
      --build-arg TARGET=$TARGET \
      --build-arg TOOLCHAIN=$TOOLCHAIN \
      .
    ~/official-images/test/run.sh $REPOSITORY/$TARGET:$TOOLCHAIN
  done
  RUSTC_STABLE_NEW=$(docker run $REPOSITORY/$TARGET:stable rustc --version || true)
  RUSTC_BETA_NEW=$(docker run $REPOSITORY/$TARGET:beta rustc --version || true)
  RUSTC_NIGHTLY_NEW=$(docker run $REPOSITORY/$TARGET:nightly rustc --version || true)
  echo $RUSTC_STABLE_NEW
  echo $RUSTC_BETA_NEW
  echo $RUSTC_NIGHTLY_NEW

before_deploy: |
  VERSION=$(echo $RUSTC_STABLE_NEW | awk '{ print $2 }')
  if [[ $RUSTC_STABLE_NEW == $RUSTC_STABLE && $TRAVIS_EVENT_TYPE == cron ]]; then
    docker rmi -f $REPOSITORY/$TARGET:stable
  else
    docker tag $REPOSITORY/$TARGET:stable $REPOSITORY/$TARGET:$VERSION
    docker tag $REPOSITORY/$TARGET:stable $REPOSITORY/$TARGET:latest
  fi
  if [[ $RUSTC_BETA_NEW == $RUSTC_STABLE && $TRAVIS_EVENT_TYPE == cron ]]; then
    docker rmi -f $REPOSITORY/$TARGET:beta
  fi
  if [[ $RUSTC_NIGHTLY_NEW == $RUSTC_NIGHTLY && $TRAVIS_EVENT_TYPE == cron ]]; then
    docker rmi -f $REPOSITORY/$TARGET:nightly
  fi
  docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"
deploy:
  provider: script
  script: docker push $REPOSITORY/$TARGET
  on:
    branch: master

after_script: docker images
